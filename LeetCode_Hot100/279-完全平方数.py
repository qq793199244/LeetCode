'''
给定正整数 n，找到若干个完全平方数（比如 1, 4, 9, 16, ...）
使得它们的和等于 n。你需要让组成和的完全平方数的个数最少。
给你一个整数 n ，返回和为 n 的完全平方数的 最少数量 。
完全平方数 是一个整数，其值等于另一个整数的平方；换句话说，其值等于一个整数自乘的积。
例如，1、4、9 和 16 都是完全平方数，而 3 和 11 不是。
示例 1：
输入：n = 12
输出：3
解释：12 = 4 + 4 + 4
示例 2：
输入：n = 13
输出：2
解释：13 = 4 + 9
提示：
1 <= n <= 104
'''
class Solution:
    # 动态规划
    def numSquares(self, n):
        dp = [i for i in range(n + 1)]
        squares = [i * i for i in range(1, int(n ** 0.5) + 1)]
        for i in range(4, n + 1):
            for j in squares:
                if j > i:
                    break
                dp[i] = min(dp[i], dp[i - j] + 1)
        return dp[-1]

if __name__ == '__main__':
    u = Solution()
    print(u.numSquares(12)) # 3
    print(u.numSquares(13)) # 2


'''
这道题如果知道数学定理之后，相当于告诉你：
(1)任何正整数都可以拆分成不超过4个数的平方和 ---> 答案只可能是1,2,3,4
(2)如果一个数最少可以拆成4个数的平方和，则这个数还满足 n = (4^a)*(8b+7) ---> 
因此可以先看这个数是否满足上述公式，如果不满足，答案就是1,2,3了
(3)如果这个数本来就是某个数的平方，那么答案就是1，否则答案就只剩2,3了
(4)如果答案是2，即n=a^2+b^2，那么我们可以枚举a，来验证，如果验证通过则答案是2
(5)只能是3
'''